
strings_not_equal(%rdi, %rsi): 
    if s1 == s2. return 0
    else return 1

read_line:
    read one single line

read_six_numbers(%rdi, %rsi):
    read six numbers and store them on:
    &rsi +0, +4, +8, +12, +16, +20
     , rcx, r8, r9, rsp, rsp + 8


main:

phase_1 (%rdi):
    if input == %0x402400

phase_2 (%rdi):
    read_six_numbers(rdi, rsi) (x0 ~ x5)
    x0 = 1
    x1 = 2 * x0
    x2 = 2 * x1
    for (int i = 1; i < 6; ++i)
        if (x[i] == (x[0] + x[0]))
            continue;
        else
            boom!;

phase_3 (%rdi):
    read 2 integers in the format of "%d %d" into 0x8(%rsp) and 0xc(%rsp)
    be careful that the size of x0 is 4 bytes
    if x0 > 7, fail
    the following is a switch statement, the address is stored in f75
    for case 7, the value is 327
    then the program will compare the number given in the case with x1,
    if v == x1, success.

phase_4
    read 2 integers in the format of "%d %d" into 0x8(%rsp) and 0xc(%rsp)
    be careful that the size of x0 is 4 bytes, assume we get x0 and x1.
    if x0 > 14, fail
    call x = func4(x0, 0, 14);
    if x == 0 and x1 == 0, success.

func4:
    int func4(int x0, int x1, int x2) {
        x2 -= x1;

        if (x2 < 0)
            x2 += 1;

        x2 /= 2;
        int c = x2 + x1;

        if (c == x0)
            return 0;

        if (c > x0) {
            x2 = c - 1;
            return 2 * func4(x0, x1, x2);
        } else {
            x1 = c + 1;
            return 2 * func4(x0, x1, x2) + 1;
        }
    }

phase_5 (%rdi):
    assume the input string is str
    static s_str at 0x4024b0: maduiersnfotvbyl
    the target string is t_str
    if (strlen != 6)
        boom!;
    for (int i = 0; i < 6; ++i) {
        char c = str[i];
        c &= 0xf;
        t_str = s_str[c];
    }
    if (t_str == "flyers")
        success.

    9 15 14 5 6 7 + 96 = ionefg

phase_6 (%rdi):
    two arrays on the stack!
    
    read x0 ~ x5

    static array, start from 0x6032d0
    332, 168, 924, 691, 477, 443
    int i = 0;
    int *p1 = x;
    while () {
        rb = p1;
        if (*p1 - 1 > 5)  (x[i] is unsigned number)
            fail;
        
        ++i;
        
        if (i < 6) {
            for (int j = i; j <= 5;++j) {
                if (x[j] == x[i-1])
                    fail;
            }
            p1 += 4;
        } else {
            goto 153
        }
    }
    for (int i = 0; i < 6; ++i) {
        if (x[i] - 1 > 5)
            fail;
        for (int j = i; j < 6; ++j)
            if (x[j] == x[i])
                fail;
    } // x0 ~ x5 from 1 ~ 6 and are different.
    153:
    for (int i = 0; i < 6; ++i) {
        x[i] = 7 - x[i];
    }
    goto: 197
    // move the static_array on the stack
    // with specific order
    for (int i = 0; i < 6; ++i) {
        if (x[i] <= 1) {    prev_x = 6
            rdx = 0x6032d0
            y[i] = rdx;
        } else {            other_x
            int a = 1;
            rdx = 0x6032d0
            do {
                rdx = *(rdx + 8);
                a += 1;
            } while (a != x[i])
            y[i] = rdx;
        }
    }
    197:
        i1 = 0;
        int c = x[i1 * 4];
        if (c <= 1) {
                goto 183:
                183:
                rdx = 0x6032d0
                188:
                y[i1] = rdx(address);
                i1 += 4;
                if (i1 == 24)
                    goto 1ab:??
                if (x[i1 * 4] <= 1)
                    goto 183:
                else {
                
                }
        }
        a = 1
        rdx = 0x6032d0
        goto: 176
    176:
        rdx = *(rdx + 8);
        a += 1;
        if (a != c)
            goto 176
        goto: 188
    
    1ab:    // useless???
        rb = y[0]
        rax = &y[1]
        rsi = &[6]
        rc = rb

        for (int i = 1; i < 6; ++i) {
            y[i] = y[i];
        }
        rd = *rax
        *(rc + 8) = rd
        rax += 8
        rc = rd
    
    1d2:
        y[5] = 0
        rbp = 5

        ra = *(rb + 8)
        ra = *ra

        if (*rb < rax)
            fail;

        rb = rb + 8;
        rbp -= 1;
        
        y[5] = 0;
    for (int i = 0; i < 5; ++i) {
        if (x[i + 1] > x[i])
            fail;
    }


        
    